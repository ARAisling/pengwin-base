#!/bin/sh
# postrm script for wlinux-base
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postrm> `remove'
#        * <postrm> `purge'
#        * <old-postrm> `upgrade' <new-version>
#        * <new-postrm> `failed-upgrade' <old-version>
#        * <new-postrm> `abort-install'
#        * <new-postrm> `abort-install' <old-version>
#        * <new-postrm> `abort-upgrade' <old-version>
#        * <disappearer's-postrm> `disappear' <overwriter>
#          <overwriter-version>
# for details, see https://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
    purge|remove|upgrade|failed-upgrade|abort-install|abort-upgrade|disappear)
	backup_dir=/etc/pre-wlinux

	# /etc/fonts/local.conf
	if [ -f "/etc/fonts/local.conf" ] ; then
	    echo "Deleting current /etc/fonts/local.conf"
	    rm /etc/fonts/local.conf
	fi
        if [ -f "${backup_dir}/local.conf" ] ; then
            echo "Restoring backup /etc/fonts/local.conf"
            mv ${backup_dir}/local.conf /etc/fonts
        fi

	# /etc/profile
        rm /etc/profile
        if [ -f "${backup_dir}/profile" ] ; then
            echo "Restoring backup /etc/profile"
            mv ${backup_dir}/profile /etc
        fi

	# /etc/os-release
        rm /etc/os-release
        if [ -f "${backup_dir}/os-release" ] ; then
            echo "Restoring backup /etc/os-release"
            mv ${backup_dir}/os-release /etc
        fi

	# /etc/environment
        rm /etc/environment
        if [ -f "${backup_dir}/environment" ] ; then
            echo "Restoring backup /etc/environment"
            mv ${backup_dir}/environment /etc
        fi

	# /etc/bashrc
        rm /etc/bashrc
        if [ -f "${backup_dir}/bashrc" ] ; then
            echo "Restoring backup /etc/bashrc"
            mv ${backup_dir}/bashrc /etc
        fi

	# /etc/apt/preferences
        rm /etc/apt/preferences
        if [ -f "${backup_dir}/preferences" ] ; then
            echo "Restoring backup /etc/apt/preferences"
            mv ${backup_dir}/preferences /etc/apt
        fi

	# /etc/apt/sources.list
        rm /etc/apt/sources.list
        if [ -f "${backup_dir}/sources.list" ] ; then
            echo "Restoring backup /etc/apt/sources.list"
            mv ${backup_dir}/sources.list /etc/apt
        fi

	# /etc/apt/trusted.gpg
	if [ -f "/etc/apt/trusted.gpg" ] ; then
	    echo "Removing current /etc/apt/trusted.gpg"
	    rm /etc/apt/trusted.gpg
	fi
	if [ -f "${backup_dir}/trusted.gpg" ] ; then
	    echo "Restoring backup /etc/apt/trusted.gpg"
	    mv ${backup_dir}/trusted.gpg /etc/apt
	fi

	# /etc/apt/trusted.gpg.d
	if [ -d "/etc/apt/trusted.gpg.d" ] ; then
	    echo "Removing current /etc/apt/trusted.gpg.d"
	    rm -r /etc/apt/trusted.gpg.d
	fi
	if [ -d "${backup_dir}/trusted.gpg.d" ] ; then
	    echo "Restoring backup /etc/apt/trusted.gpg.d"
	    mv ${backup_dir}/trusted.gpg.d /etc/apt
	fi

	# /etc/dpkg/origins/default
        if [ -f "/etc/dpkg/origins/default" ] ; then
	    echo "Removing current /etc/dpkg/origins/default"
	    rm /etc/dpkg/origins/default
	fi
        if [ -f "${backup_dir}/default" ] ; then
            echo "Restoring backup /etc/dpkg/origins/default"
            mv ${backup_dir}/default /etc/dpkg/origins
        fi

	# /etc/sudoers
        if [ -f "/etc/sudoers" ] ; then
	    echo "Removing current /etc/sudoers"
	    rm /etc/sudoers
	fi
        if [ -f "${backup_dir}/sudoers" ] ; then
            echo "Restoring backup /etc/sudoers"
            mv ${backup_dir}/sudoers /etc
        fi

	# /etc/sudoers.lecture
	if [ -f "/etc/sudoers.lecture" ] ; then
	    echo "Removing current /etc/sudoers.lecture"
	    rm /etc/sudoers.lecture
	fi
        if [ -f "${backup_dir}/sudoers.lecture" ] ; then
            echo "Restoring backup /etc/sudoers.lecture"
            mv ${backup_dir}/sudoers.lecture /etc
        fi

	# Delete our (now) unused backups dir
	rm -r ${backup_dir}

	# Delete our sources we added (shouldn't need to be doing this)
	rm /etc/apt/sources.list.d/whitewaterfoundry.list
    ;;

    *)
        echo "postrm called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
