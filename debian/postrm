#!/bin/sh
# postrm script for wlinux-base
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postrm> `remove'
#        * <postrm> `purge'
#        * <old-postrm> `upgrade' <new-version>
#        * <new-postrm> `failed-upgrade' <old-version>
#        * <new-postrm> `abort-install'
#        * <new-postrm> `abort-install' <old-version>
#        * <new-postrm> `abort-upgrade' <old-version>
#        * <disappearer's-postrm> `disappear' <overwriter>
#          <overwriter-version>
# for details, see https://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
    purge|remove|upgrade|failed-upgrade|abort-install|abort-upgrade|disappear)
	backup_dir=/etc/pre-wlinux

        # List of files we change / require backing up
        FILES="/etc/fonts/local.conf \
            /usr/lib/os-release \
            /etc/environment \
            /etc/bashrc \
            /etc/apt/preferences \
            /etc/apt/sources.list \
            /etc/apt/trusted.gpg \
            /etc/sudoers \
            /etc/sudoers.lecture"
#           /etc/dpkg/origins/default

        # Backup all old files since we over-write a lot of other package's files
        backup_dir="/etc/pre-wlinux"
        mkdir -p ${backup_dir}

        for FILE in ${FILES} ; do
	    COUNT=$(echo ${FILE} | awk -F '/' '{ print NF }')
	    FILENAME=$(echo ${FILE} | cut -d '/' -f $COUNT)
	    BACKUP=${backup_dir}/${FILENAME}
	    if [ -f "${BACKUP}" ] ; then
	        echo "Restoring backed up ${FILE}"
	        cp ${BACKUP} ${FILE}
	    fi
        done

	echo "Restoring /etc/dpkg/origins/debian symlink"
	ln -sf /etc/dpkg/origins/debian /etc/dpkg/origins/default
	rm /etc/dpkg/origins/wlinux
    ;;

    *)
        echo "postrm called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
